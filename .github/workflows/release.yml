name: Release

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

env:
  PACKAGE_NAME: "direct-data-driven-mpc"
  TAG_NAME: ${{ github.ref_name }}
  PYTHON_VERSION: '3.12'

jobs:
  verify_tag:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify tag matches pyproject.toml version
        id: release
        run: |
          TAG_VERSION=$TAG_NAME
          PYPROJECT_VERSION=$(sed -nE 's/^version\s*=\s*"([^"]+)"/\1/p' pyproject.toml)
          echo "Tag version: $TAG_VERSION"
          echo "pyproject.toml version: $PYPROJECT_VERSION"
          if [ "$TAG_VERSION" != "$PYPROJECT_VERSION" ]; then
            echo "Tag does not match pyproject.toml version."
            exit 1
          else
            echo "Tag matches pyproject.toml version."
          fi

      - name: Verify tag points to latest main commit
        run: |
          git fetch origin main
          LATEST_MAIN_SHA=$(git rev-parse origin/main)
          echo "Tag commit SHA: $GITHUB_SHA"
          echo "Latest main commit SHA: $LATEST_MAIN_SHA"
          if [ "$GITHUB_SHA" != "$LATEST_MAIN_SHA" ]; then
            echo "Tag does not point to the latest main commit."
            exit 1
          else
            echo "Tag points to the latest main commit."
          fi

  check_pypi:
    needs: verify_tag
    runs-on: ubuntu-latest
    steps:
      - name: Fetch information from PyPI
        run: |
          response=$(curl -s https://pypi.org/pypi/${{ env.PACKAGE_NAME }}/json || echo "{}")
          latest_previous_version=$(echo $response | jq --raw-output "select(.releases != null) | .releases | keys_unsorted | last")
          if [ -z "$latest_previous_version" ]; then
            echo "Package not found on PyPI."
            latest_previous_version="0.0.0"
          fi
          echo "Latest version on PyPI: $latest_previous_version"
          echo "latest_previous_version=$latest_previous_version" >> $GITHUB_ENV

      - name: Compare versions and exit if not newer
        run: |
          NEW_VERSION=$TAG_NAME
          LATEST_VERSION=$latest_previous_version
          HIGHEST_VERSION=$(printf '%s\n' "$LATEST_VERSION" "$NEW_VERSION" | sort -rV | head -n 1)
          if [[ "$HIGHEST_VERSION" != "$NEW_VERSION" || "$NEW_VERSION" = "$LATEST_VERSION" ]]; then
            echo "The new version $NEW_VERSION is not greater than the latest version $LATEST_VERSION on PyPI."
            exit 1
          else
            echo "The new version $NEW_VERSION is greater than the latest version $LATEST_VERSION on PyPI."
          fi

  build:
    needs: check_pypi
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Upgrade pip and install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Install project package in editable mode
        run: |
          pip install -e .

      - name: Convert README source file links to absolute GitHub URLs
        run: |
          export REPO_URL="https://github.com/pavelacamposp/direct-data-driven-mpc/blob/main/"
          perl -i -pe 's{\[([^\]]+)\]\((?!https?://|#)([^)]+)\)}{"[$1]($ENV{REPO_URL}$2)"}ge' README.md

      - name: Build source and wheel distribution
        run: |
          python -m build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  pypi_publish:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: release
    permissions:
      id-token: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  github_release:
    needs: pypi_publish
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          files: dist/*
